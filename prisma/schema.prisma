generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Common User Model
model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  password       String
  image          String?
  number         String //(Wh)
  currentAddress String
  homeAddress    String?
  FatherName     String?
  FatherNumber   String?
  NIDNumber      String?
  NIDFront       String?
  NIDBack        String?
  role           Role
  status         UserStatus
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt


  // Other role-specific fields
  point      Int        @default(0)
  membership Membership @default(SILVER)
  
  buyRecord  String[]
  Flower     Flower[]
  orders     Order[]
  payments   Payment[]
}


// Enums
enum Role {
  USER
  MANAGER
  ADMIN
  EMPLOY
  DISTRIBUTOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum Membership {
  SILVER
  GOLD
  DIAMOND
  PLATINUM
  TITANIUM
}

// flower model
model Flower {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  image       String
  description String
  color       String
  category    FlowerCategory
  FlowerType  FlowerType
  stock       Int
  discount    Int?
  isAvailable Boolean
  rating      Float?
  likes       Int?
  commments   String[]

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FlowerCategory {
  HAPPY_MOMENTS
  LOVE_AND_ROMANCE
  BIRTHDAY_SPECIALS
  CONGRATULATIONS
  GET_WELL_SOON
  SYMPATHY_AND_CONDOLENCES
  THANK_YOU
  FRIENDSHIP
  NEW_BABY
  ANNIVERSARY_CELEBRATIONS
}

enum FlowerType {
  PREMIUM
  REGULAR
  SPECIAL
  LIMITED
}

// Payment model
model Payment {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  paymentId   String
  status      PaymentStatus
  PaymentType PaymentType
  paymentDate DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String         @db.ObjectId
  user        User           @relation(fields: [userId], references: [id])
}

// Order model
model Order {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  FlowerId    String         @db.ObjectId
  TotalPrice  String
  Quantity    String
  PaymentType PaymentType
  PaymentStatus PaymentStatus
  OrderDate   DateTime       @default(now())
  DeliveryDate DateTime?
  DeliveryAddress String
  DeliveryStatus DeliveryStatus
  DeliveryCharge Float
  OrderStatus OrderStatus
  creaatedAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String         @db.ObjectId
  user        User           @relation(fields: [userId], references: [id])
}


enum DeliveryStatus {
  PENDING
  DELIVERED
  CANCELLED
  RETURNED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentType {
  CASH_ON_DELIVERY
  BKASH
  NAGAD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
