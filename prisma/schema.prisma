

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  name         String
  email        String      @unique
  password     String
  role         Role    
  status       UserStatus @default(ACTIVE)
  bloodType    BloodGroup
  location     String
  availability Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  profile      UserProfile?
  donor        Request?  
  requesterRequests Request[] @relation("RequesterRequest")
}

model Request {
  id              String      @id @default(uuid())
  donorId         String @unique
  requesterId     String 
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus      @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  donor           User        @relation(fields: [donorId], references: [id])
  requester       User        @relation("RequesterRequest", fields: [requesterId], references: [id])
}

model UserProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  bio               String
  age               Int
  lastDonationDate  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

enum BloodGroup {
  A_POSITIVE @map("A+")
  B_POSITIVE @map("B+")
  A_NEGATIVE @map("A-")
  B_NEGATIVE @map("B-")
  AB_POSITIVE @map("AB+")
  AB_NEGATIVE @map("AB-")
  O_POSITIVE @map("O+")
  O_NEGATIVE @map("O-")
}

enum RequestStatus {
  PENDING
   APPROVED
    REJECTED
}
enum Role {
  DONOR
  REQUESTER
  ADMIN
}

enum UserStatus { 
  ACTIVE
  BlOCKED
}